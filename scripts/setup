#!/bin/env python3

import click
import hulks
from pathlib import Path
import typing
import shutil
import git
import logging
import subprocess

VCPKG_TAG = "2021.05.12"


def build_simrobot():
    command = f'{hulks.PROJECT_ROOT/"tools/SimRobot/build_simrobot"}'
    subprocess.run(command, shell=True, check=True)
    hulks.force_symlink(
        hulks.PROJECT_ROOT / 'build/SimRobot/current-buildtype/libhulk.so',
        hulks.PROJECT_ROOT / 'tools/SimRobot/build/libhulk.so')


def clone_vcpkg(vcpkg_dir: Path):
    git.Repo.clone_from(url='https://github.com/microsoft/vcpkg.git',
                        to_path=vcpkg_dir,
                        branch=VCPKG_TAG)


def update_vcpkg(vcpkg_dir: Path):
    repo = git.Repo(vcpkg_dir)
    repo.remotes.origin.fetch()
    repo.git.checkout(VCPKG_TAG)


def bootstrap_vcpkg(vcpkg_dir: Path):
    command = f'cd {vcpkg_dir};'
    command += './bootstrap-vcpkg.sh -disableMetrics'
    subprocess.run(command, shell=True, check=True)


def upgrade_vcpkg(vcpkg_dir: Path):
    if not vcpkg_dir.exists():
        clone_vcpkg(vcpkg_dir)
        bootstrap_vcpkg(vcpkg_dir)
    else:
        repo = git.Repo(vcpkg_dir)
        if repo.rev_parse(VCPKG_TAG) != repo.rev_parse('HEAD'):
            update_vcpkg(vcpkg_dir)
            bootstrap_vcpkg(vcpkg_dir)


class CMakeError(Exception):
    pass


def run_cmake(target, build_type, command='', cmake_params=''):
    hulks.logger.info(f'CMake for {target}:{build_type}')
    build_directory = hulks.PROJECT_ROOT / f'build/{target}/{build_type}'
    shutil.rmtree(build_directory, ignore_errors=True)
    build_directory.mkdir(parents=True, exist_ok=True)
    command += f'cmake -S "{hulks.PROJECT_ROOT}" -B "{build_directory}" -G "Ninja" -DHULK_TARGET="{target}" -DCMAKE_BUILD_TYPE="{build_type}" {cmake_params}'
    try:
        subprocess.run(command, shell=True, check=True)
        hulks.logger.success(
            f'Finished generating files for {target}:{build_type}')
    except subprocess.CalledProcessError:
        hulks.logger.error(
            f'Could not generate files for target {target}:{build_type}')
        raise CMakeError()


def setup(target: str, build_types: typing.List[str], vcpkg_dir: Path):
    try:
        hulks.logger.info(
            f'Setting up for \'{target}\' and build types {build_types}')
        cmake_params_vcpkg = (
            f'-DCMAKE_TOOLCHAIN_FILE="{vcpkg_dir / "scripts/buildsystems/vcpkg.cmake"}" '
            f'-DVCPKG_OVERLAY_PORTS="{hulks.PROJECT_ROOT/ "tools/vcpkg-ports"}"'
        )
        if target == "NAO":
            environment_setup = hulks.PROJECT_ROOT / Path(
                'sdk/current/environment-setup-corei7-64-aldebaran-linux')
            command = (
                f'. {environment_setup};'
                'export CC=$CLANGCC;'
                'export CXX=$CLANGCXX;'
            )
            for build_type in build_types:
                run_cmake(target, build_type, command=command)
        elif target == "Replay":
            upgrade_vcpkg(vcpkg_dir)
            for build_type in build_types:
                run_cmake(target,
                          build_type,
                          cmake_params=cmake_params_vcpkg)
        elif target == "SimRobot":
            build_simrobot()
            upgrade_vcpkg(vcpkg_dir)
            for build_type in build_types:
                run_cmake(target,
                          build_type,
                          cmake_params=cmake_params_vcpkg)
        elif target == "Webots":
            upgrade_vcpkg(vcpkg_dir)
            for build_type in build_types:
                run_cmake(target,
                          build_type,
                          cmake_params=cmake_params_vcpkg)
        hulks.logger.success(f'Finished setup for {target}:{build_types}')
    except CMakeError:
        hulks.logger.error('Setup failed')
        exit(1)


BUILD_TYPES = [
    'Release', 'Develop', 'Debug'
]


@click.command()
@click.option('-v', '--verbose', count=True)
@click.option('-t',
              '--target',
              type=click.Choice(['NAO', 'SimRobot', 'Replay', 'Webots'],
                                case_sensitive=False),
              required=True)
@click.option('-b',
              '--build-type',
              type=click.Choice(BUILD_TYPES),
              multiple=True,
              default=BUILD_TYPES,
              show_default=True)
@click.option('--vcpkg-dir',
              default=(hulks.PROJECT_ROOT / '../vcpkg'),
              show_default=True)
def main(verbose, target, build_type, vcpkg_dir):
    hulks.logger.setLevel(logging.INFO if verbose == 0 else logging.DEBUG)
    setup(target, build_type, Path(vcpkg_dir))


if __name__ == '__main__':
    main()
