#!/bin/env python3

import click
import hulks
import os
import logging


def current_target():
    try:
        return os.readlink(hulks.PROJECT_ROOT / 'build/current-target')
    except FileNotFoundError:
        hulks.logger.error("Current target was not found")
        exit(1)


def current_build_type():
    try:
        return os.readlink(hulks.PROJECT_ROOT /
                           'build/current-target/current-buildtype')
    except FileNotFoundError:
        hulks.logger.error("Current build_type was not found")
        exit(1)


def compile(verbose: bool, target: str, build_type: str):
    try:
        hulks.compile(target, build_type, verbose)
        hulks.logger.success("Compilation successful")
    except hulks.CompilationError:
        hulks.logger.error("Compilation failed!")
        exit(1)


@click.command()
@click.option('-v', '--verbose', count=True)
@click.option('-t',
              '--target',
              type=click.Choice(['NAO', 'SimRobot', 'Replay', 'Webots'],
                                case_sensitive=False),
              default=current_target,
              show_default="linked current target of previous build")
@click.option('-b',
              '--build-type',
              type=click.Choice(['Release', 'Develop', 'Debug']),
              default=current_build_type,
              show_default="linked current build type of previous build")
def main(verbose, target, build_type):
    hulks.logger.setLevel(logging.INFO if verbose == 0 else logging.DEBUG)
    compile(verbose, target, build_type)


if __name__ == '__main__':
    main()
